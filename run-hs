#!/bin/bash

#this bash file opens mac os x terminal windows using osascript. adjust it for your needs based on how to open a shell window/tab with your system

usage="Usage: run-hs <node-count>"

if [ $# -lt 1 ]; then
	echo $usage
	exit 1
fi

node_count=$1

# this is the name given to the java security policy file generated by this script
java_policy_file="java-security.policy"

for file in $(ls hs | grep ".java"); do
	echo "Compiling $file"
	#echo "[attempt] javac -classpath ./ -d ./ $file"
	javac -g -classpath ./ -d ./ hs/$file
	if [ "$?" -gt "0" ]; then
		echo "An error occured during the compilation."
		exit
	fi
done

WD="'`pwd`'"

cat java.policy.default | sed 's|\#\#CURRENT_WORKING_DIRECTORY\#\#|'"$(pwd)"'|' > $java_policy_file

osascript 2>/dev/null <<EOF
	tell application "Terminal"
		activate
		do script with command "cd $WD; clear; java -Djava.security.policy=$java_policy_file hs/Ringer $node_count;"
	end tell
EOF

sleep 2 #not really necessary, but I use this so I can move the newly opened window off to the side while the rest popup over each other


#cmd="cd $WD; clear; jdb -launch -J-Djava.security.policy=java.policy cs553/hw1/Node;"

cmd="cd $WD; clear; java -Djava.security.policy=$java_policy_file hs/Node;"

for i in $( seq 1 $node_count ); do
	echo "Launching Node $i"
	
	#if you want to open a terminal window to 
	#open for every node to monitor it's output, 
	#then uncomment the next line:
	#osascript 2>/dev/null -e 'tell application "Terminal"' -e 'activate' -e "do script with command \"$cmd\"" -e "end tell"
	# OR
	#if you just want to spawn a Node process and not monitor it's output then leave this line uncommented:
	java -Djava.security.policy=java.policy hs/Node >/dev/null &
	
	if [ "$node_count" -gt "64" ]; then
		# this sleep is to give the Nodes time to register themselves with the RMI registry. Sometimes 
		# when so many Nodes are spawned, some fail to register and then problems happen. Adjust it accordingly.
		sleep 1
	fi

done
wait
echo Execution Complete
